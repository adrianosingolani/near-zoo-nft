{"version":3,"sources":["utils/config.js","utils/near.js","components/Header.js","utils/nfts.js","components/Mint.js","App.js","reportWebVitals.js","index.js"],"names":["CONTRACT_NAME","environment","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","explorerUrl","Error","nearEnv","a","connect","Object","assign","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","near","window","walletConnection","WalletConnection","accountId","getAccountId","contract","Contract","account","viewMethods","changeMethods","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","component","Button","marginLeft","color","onClick","signOut","location","reload","requestSignIn","nfts","title","description","require","Mint","useState","nftParams","tokens","useEffect","filter","token","token_id","length","console","log","mintNFT","index","Math","floor","random","params","Date","now","metadata","media","receiver_id","display","justifyContent","marginY","disabled","App","className","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","nearInitPromise","initializeContract","ReactDOM","createRoot","document","getElementById","render","StrictMode","catch","error"],"mappings":"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","file":"static/js/main.c6f81797.chunk.js","sourcesContent":["const CONTRACT_NAME = \"zoo-nft.adriano.testnet\"\n\nfunction environment(env) {\n  switch (env) {\n    case \"mainnet\": \n      return {\n        networkId: \"mainnet\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: CONTRACT_NAME,\n        walletUrl: \"https://wallet.near.org\",\n        helperUrl: \"https://helper.mainnet.near.org\",\n        explorerUrl: \"https://explorer.mainnet.near.org\",\n      };\n    case \"testnet\": \n      return {\n        networkId: \"testnet\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: CONTRACT_NAME,\n        walletUrl: \"https://wallet.testnet.near.org\",\n        helperUrl: \"https://helper.testnet.near.org\",\n        explorerUrl: \"https://explorer.testnet.near.org\",\n      };\n    default:\n      throw Error(`Unknown environment '${env}'.`);\n  }\n}\n\nexport default environment;","import environment from './config';\nimport { connect, Contract, keyStores, WalletConnection } from 'near-api-js';\nimport { formatNearAmount } from 'near-api-js/lib/utils/format';\n\nconst nearEnv = environment('testnet');\n\nexport async function initializeContract() {\n  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearEnv));\n  window.walletConnection = new WalletConnection(near);\n  window.accountId = window.walletConnection.getAccountId();\n  window.contract = new Contract(\n    window.walletConnection.account(),\n    nearEnv.contractName,\n    {\n      viewMethods: ['nft_tokens_for_owner'],\n      changeMethods: ['nft_mint'],\n    }\n  );\n}\n\nexport async function accountBalance() {\n  return formatNearAmount(\n    (await window.walletConnection.account().getAccountBalance()).total,\n    2\n  );\n}\n\nexport async function getAccountId() {\n  return window.walletConnection.getAccountId();\n}\n\nexport function login() {\n  window.walletConnection.requestSignIn(nearEnv.contractName);\n}\n\nexport function logout() {\n  window.walletConnection.signOut();\n  window.location.reload();\n}","import * as React from 'react';\n\nimport { login, logout } from \"../utils/near\";\n\nimport {\n  AppBar,\n  Box,\n  Toolbar,\n  Typography,\n  Button\n} from '@mui/material/';\n\nexport default function ButtonAppBar() {\n  const account = window.walletConnection.account();\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            NEAR Zoo NFT\n          </Typography>\n          {account.accountId ? (\n            <>\n              <Typography variant=\"caption\">{account.accountId}</Typography>\n              <Button sx={{marginLeft: 2}} variant=\"outlined\" color=\"inherit\" onClick={() => logout()}>Logout</Button>\n            </>\n          ) : (\n            <Button color=\"inherit\" onClick={() => login()}>Login</Button>\n          )}\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n}","export const nfts = [\n  {\n    title: 'Lion',\n    description: 'A symbol of courage and bravery - the majestic lion king of animals.',\n  },\n  {\n    title: 'Wolf',\n    description: 'An intelligent and freedom-loving predator, a relative of dogs of all breeds.',\n  },\n  {\n    title: 'Capybara',\n    description: 'Kind and charming giant among rodents.',\n  },\n  {\n    title: 'Giraffe',\n    description: 'An elegant giant, the tallest animal on Earth.',\n  },\n  {\n    title: 'Hippopotamus',\n    description: 'The largest and strongest inhabitant of rivers and lakes in Africa.',\n  }\n]","import React, { useEffect, useState } from 'react';\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardMedia,\n  CardActions,\n  Typography,\n  ImageList,\n  ImageListItem\n} from '@mui/material';\n\nimport { nfts } from '../utils/nfts';\n\nconst BN = require(\"bn.js\")\n\n// import getConfig from '../config'\n// const { networkId } = getConfig(process.env.NODE_ENV || 'development')\n\nfunction Mint() {\n  const [nftParams, setNftParams] = useState()\n  const [tokens, setTokens] = useState([])\n\n  const account = window.walletConnection.account();\n\n  useEffect(() => {\n    // dealer.shuffle()\n    // getTokens()\n  }, [])\n\n  // useEffect(() => {\n  //   drawCard()\n  // }, [tokens])\n\n  useEffect(() => {\n    // console.log('useEffect');\n    const result = tokens.filter(token => token.token_id === nftParams.token_id);\n\n    if (result.length > 0) {\n      console.log('already minted');\n      // drawCard()\n    }\n  }, [nftParams])\n\n  // const drawCard = () => {\n  //   // console.log('drawCard');\n  //   const card = dealer.draw(1)[0]\n\n  //   const rank = card.rank.charAt(0).toUpperCase() + card.rank.slice(1)\n  //   const suit = card.suit\n\n  //   const params = {\n  //     token_id: `${window.accountId}-${rank}-of-${suit}-test1`,\n  //     metadata: {\n  //       title: `${rank} of ${suit}`,\n  //       description: \"NFT collection created for the challenge #3 of NEAR SPRING POP-UP HACKATHON\",\n  //       media: `https://adrianosingolani.github.io/near-nft/cards/${suit}/${rank}.png`,\n  //     },\n  //     receiver_id: window.accountId,\n  //   }\n\n  //   setNftParams(params)\n  // }\n\n  const getTokens = async () => {\n    window.contract.nft_tokens_for_owner({\n      account_id: window.accountId,\n    })\n      .then(res => {\n        setTokens(res);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  };\n\n  const mintNFT = async () => {\n    // console.log('mint');\n\n    const index = Math.floor(Math.random() * nfts.length);\n\n    // console.log(nfts[index]);\n\n    const { title, description } = nfts[index];\n\n    const params = {\n      token_id: `${window.accountId}-${title}-${Date.now()}`,\n      metadata: {\n        title: title,\n        description: description,\n        media: `https://adrianosingolani.github.io/near-zoo-nft/assets/${title}.jpg`,\n      },\n      receiver_id: window.accountId,\n    }\n\n    console.log(params);\n\n    // await window.contract.nft_mint(\n    //   nftParams,\n    //   300000000000000, // attached GAS (optional)\n    //   new BN(\"1000000000000000000000000\")\n    // );\n  };\n\n  // if (nftParams) {\n  return (\n    <Box sx={{display: 'flex', justifyContent: 'center', marginY: 4}}>\n      {/* <Card sx={{ maxWidth: 180, boxShadow: 'none' }}>\n          <CardMedia\n            component=\"img\"\n            // height=\"120\"\n            image={nftParams.metadata.media}\n            alt={nftParams.metadata.title}\n          />\n          <CardActions style={{ padding: 0, paddingTop: 16, paddingBottom: 32 }}>\n            <Button variant='outlined' fullWidth onClick={() => mintNFT()}>Mint</Button>\n          </CardActions>\n        </Card> */}\n      {/* <Typography variant='h3'>Your deck:</Typography>\n        <ImageList cols={6}>\n          {tokens.map((item) => (\n            <ImageListItem key={item.token_id}>\n              <img\n                src={item.metadata.media}\n                alt={item.metadata.title}\n                style={{ width: 90 }} \n                loading=\"lazy\"\n              />\n            </ImageListItem>\n          ))}\n        </ImageList> */}\n\n      <Button\n        onClick={() => mintNFT()}\n        disabled={account.accountId ? false : true}\n        variant='contained'\n      >\n        Mint\n      </Button>\n    </Box>\n  )\n  // }\n\n  // return (\n  //   <Typography>Loading...</Typography>\n  // )\n}\n\nexport default Mint","import React from \"react\";\n\nimport Header from './components/Header'\nimport Mint from \"./components/Mint\";\n\nimport { Container } from \"@mui/material\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container>\n        <Mint />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { initializeContract } from \"./utils/near\";\n\nwindow.nearInitPromise = initializeContract()\n  .then(() => {\n    const root = ReactDOM.createRoot(document.getElementById('root'));\n    root.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    );\n  })\n  .catch(console.error);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}